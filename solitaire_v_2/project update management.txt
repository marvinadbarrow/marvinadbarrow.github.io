OBJECT ID AND DESTINATION 
841 +

note... when the card is dropped you can use the id of the drop pile to push the card  to the associated 'tracking' subarray. 

But you also need to 'pop' the card (or cards) out of the destination array. so maybe have an object representing the card as below: 

{
card:
origin:
destination:
array_index:
}


some considerations: 

when multiple cards are transferred, just the first card in the selected group of cards is registered.  which means that: 
a) all of the cards accompanying the first card need to be pushed to the array, and all of them need to have their objects updated

b) all of the card objects in the origin subarray need to be popped out of the  arry; I suppose splice could be used for that ; you'll need the index of the index of the first card to use array.splice(index, -1) which will remove everything, first card object included, up to the end of the array. 

c) you need a record of all the cards that are dropped, and for a way to push 'all' of them to the array associated with the destination pile. 


Waht you could do is map through the origin array for the id of the first selected card, and if the card is not in the last position of the array, then record the firwst card and other cards into the temporary array, then you can place them all into the destination array. 

1285 gives the origin pile. 

879 gives desintation pile

1293 gives card id. 


when doing a transfer of the moved multiple cards.  You'll need to get the value of all of the cards 'above' the first picked cards, and, using the number of cards transferred value in the object, the values of the other cards by mapping through the destination, finding the position of the first card, and looping through the childnodes of the destination pile, creating a new object for each childnode found from the list of children following the first card; 

all you need is the id of the card because all other details on their object, origin destination are the same as that of the first card. Those objects can then be pushed (after the first card object) to the array representing the destination pile. for the initial object, only the 'primary_card' property (which is an objectd containing card value, origin and destination) needs to be pushed to the drop pile array;  The other objects created can just be a copy of that, but with their own unique card value being used instead of the first card value. 

then it's just a matter of using the origin name to select the correct drop pile array, search through it for the object that has the first card's value, and using the index to splice through to the end of the array to remove the card and all of those that follow it in the array. 

the 'number of cards' transferred can be used to dictate what kind of function operates; so for single card drops, the card just needs to be popped from the origin drop pile array and pushed to the destination drop pile array.  Multiple card drops will be handled as in the above paragraphs. 

FROM WASTE PILE TO FOUNDATION PILE. 

This also needs to be handled since, I don't think this is being registered at the moment and might be the principal cause for inaccurate information about where cards are. 

once everything is handled then it would be a good idea to console log the arrays to make sure they are representing card positions correctly, and once that is confirmed, then, in the case of a solvable scenario, the solve function can use the arrays and carry out a solve since, hopefully, all cards should be showing the correct positions. 


NO DESTINATION: 

if the last element of the multiple cards array has no destination, it means that the card was selected but never dropped onto a different destination, which is not a problem because the object never gets to the place where the destination can be recorded (that's why it has no destination because that's where the destination is inserted into the object) 


You can tell if the card just droppedx on the foundation pile is from the waste pile; basically if the card value matches the zero position value of the wasteArr array, then the card's origin is the the waste pile. 
so, we can have the condition inside the 

so, if the card comes from the waste pile there's no need to remove it from the waste array, that will be handled, but anyway, waste array and remain array are not used when in the 'solve' process so their positional accuracy isn't a factor. 

If a card is selected but not moved then it won't be registered as dropped, so now it's just a question of writing the function to place dropped cards into destination array and to remove them from origin array. and it's a simple matter of checking how many cards were moved to decide which function needs to be executed. 

Note, that, since wastepile cards can only be draged one by one, you only need to push the card object to the destination so there are three functions,

a) functions handling cards moved from the waste pile to drop piles or foundation piles
b) functions handling movement of one card to from


a) push object to destination array 
b) push object to destination array and pop origin array
c) 
1. get index of first selected card object in origin array
2. push that, and following objects, up to the last object to the destination drop pile array, 
3. splice the same elements from the origin drop pile array. 


NOT FINISHED YET.  

There's an issue with moving files from foundation piles to drop pile.. wrong card is being registered. 

the reason why the wrong card is being registered is because the last element of the recrods array is being logged to the console. This happens because, accidentally, we are meeting the condition in the else part of the if/else statement.  The if condition is that the card value was in the zero position of the waste array, in other words, the card came from the waste pile, but this won't be the case for cards coming from the foundation piles, so, because there is no other condition set, those card drops fall into the else category of cards 'not' originating int he waste pile.  What needs to be done is for there to be another condition set, such that if the value of the dropped card does not correspond to the value of the last card in the records array and did not come from the waste pile, then it must have originated in the foundation pile...  NOt sure if this is bomb proof but will test it. 

The above seems to be working; and you can move cards back and forth between the same two positions and the correct information will appear in the last object on the records array.  NOW WE CAN PROCEED WITH POPULATING THE ARRAYS to record the positions of all cards.  



JUST A THOUGHT ABOUT A BACK BUTTON. 
It seems plausible that the record kept in the tracking array can be used to calculate reversal of previous moves, because the order of the objects in the array is the order in which cards were moved from one place to another; and since we have both destination and origin, then the array can be used to move a card from destination back to origing, and the preceding card can move from its destination back to its origin and so forth - you should be able to go all the way back to the beginning of the game.   you could also integrate a replay this game functionality where the original state is saved and the cards are returned to that state... so much can be done.



UNWRAPPING ISSUES - 
check what happens to ace drops to foundation pile, - it looks like they are not being unwrapped when transferred to the foundation pile.  I'll check with other cards by adding a second card to the first. 

REMOVED THIS LINE: 
multipleCardsRecords.push(foundationObj), because it seems to be adding an extra 'empty' object to the breadcrumb array... or the problem is coming from the objects created in the event listener for clicks on cards when they are dragged for transferring. 

checking foundationObj which is the faulty object pushed to the breadcrumb array. 
it seems as though the card is being recognized as originating in the foundation, but the card is coming from the drop pile, but it still sends the 'empty' object to the bread crum, so that's why when the rest of the function tries to read the last object in the breadcrumb array as the drop object, it causes an error, because there is nothing to read, which might be why, in turn, the card isn't removed from its origin tracking subarray because the details are for an empty element, which isn't the drop card.  So the drop cards object stays in the origin subarray.. 
so something must be wrong with the conditional logic for cards (maybe just the ACE) moving from drop piles to foundation piles. 



FOUND the first error
The ORIGIN variable I created is 'NOT' the origin, it's the destination. 

ISSUE IS NOW RESOLVED.  the fact that the condition was checking the origin property of the card object against the 'destination' meant that the object was not recognized, and somehow an empty object was sent for tracking. I mistakenly forgot that 'event.target' was the drop target and not the origin target, and I was using 'event.target.id' as the origin when in fact it was the destination name, which wouldn't match the origin name when the card is being moved from the drop pile to a foundation pile.  

MOVED CARDS STILL HAVE ORIGINAL ORIGIN IN ORIGIN PROPERTY ON CARD OBJECT.  
That needs to change.  When moved, the old 'origin' property must be given the old 'destination' property. 
//  I think this can be solved by considering that, when a card is first moved, it's destination property will be empty, because it has not moved yet. But, if it has previously been moved, then the destination will be a string; when it is moved on from there, and lands in the new destination, the previous destination value can be used as the origin value because the destination name, prior to being changed, is where the card originated. just a matter of finding where the destination is updated on the object.  - SOLVED.. 

IN THE card type function, when a card object comes in it is assigned the destination.  If there was a previous destination on the object, I created a variable for it and gave the object origin property that variable. If there was no previous destination, I just used the previous origin property value as the origin.  



NEXT ISSUE: cards moved from foundation are not yet being transferred to drop pile tracker array
solved. Was using the incorred variable, and old one, which was returning as null, when it should have been a variable giving origin name of card object; which would then be used to locate the card objects tracking array in order to pop the object out.  Because the variable was null, nothing was found so the object was not popped from the array; hence there were two instances of the object, one in the destination tracking array and another in the origin tracking array.  Once the correct variable was given, the issues solved itself. 

(above was committed on 31 october)


NEXT SOLVED ISSUE. 
tranferred cards from origin tracking array to destination tracking array, BUT, given that only the selected card gets its destination and origin remapped, when the transfer was made successfully, the cards that went along with the first card have not changed destination or origin, so I pulled those details from the first card and updated those properties in the other cards; it's all working now.  

COMMIT "multiple card movements need all of the subsequent card objects to have their origin and destination properties changed")



checking for any other issues before moving on. 
You also need to push the other cards to the breadcrumb array otherwise they'll be missing from the history. 
handled this by pushing the first card early to the destination array, because it already has all correct details and is already in the breadcrumb array, and then updating the other cards which were transferred along with the the first card; updated the number of cards transferred, true origin and true destination.  So that, if the cards are moved on individually, they've all got the correct origin and destination details; which is also necessary for the back button function to work. 

another issue.  I might have to completely remake the objects because, if a copy of the object is already in the breadcrumbs, the other instances of the object also receive the updates. 

MAJOR CHANGE TO DROP FUNCTION - 
Moved from lines from 855 into a condition that states, if the ID on the transfer card doesn't exist (sometimes it returns null) alert player that card doesn't exist (a react toast would be great here), process the card. This should prevent one of the errors where, if the 'null' id error is triggered, the card still appears in the breadcrumb array.  I'm actually thinking to move the breadcrumb push of foundation cards and drop piles into the drop function, AFTER a successful attempt to get the id, so that, only then will the card be pushed to breadcrumb.  I think that's a good idea, or you could even just use a small condition which says if the id is not present, do nothing, but if it is, push to bread crumb, but i suppose, since the id is used in more than one the processes involving the 'id'would be redundant anyway, becuase they can't execute either, so you may as well stop the rest of the drop function executing because everything that happens in the function after the id has been identified exists to handle the card that is dropped; but it no card has dropped so the code is of no use. It's best to stop it at the front gate where it's recognized that there is no id.  I'll see if I can reproduce the erros by playing about with the card drop. 

So, I'm keeping both changes, the moving of the rest of the drop function into the if/else condition which decides what happens if the id is present or not, AND, moving the breadcrumb push to the stage after an id has been identified. That may involve having the object present though; good news is that the object already exists. 

SOLVED, instead of pushing the object to breadcrumb when the card is clicked, I added the number of cards selected (to the object), including the clicked card (default is 1), and unshifted the object to a temporary array; when the card drop is accepted, then the object in the temporary array is pushed to the breadcrumb array. This acts a little bit like a transaction in that the whole process of drag and drop must complete before the card is moved to breadcrumb and this should solve the above issue. 

NEXT CHECK
You need to check if modifying the object of the first card in a group select affects other instances of the card further back in the breadcrumb, and if there is an effect, work out how to create a copy and place it correctly so that this can be avoided. You could actually pop the dropped card from breadcrumb and then add in the new one, because it is added 'before' the other cards dragged with it. 


END OF GAME CHECK - 
seems as though the correct records are showing for the game layout; all numbers in piles are displaying correctly. 
The only issue is in the breadcrumbs where, some of the information isn't representing exactly what has happened, such as number of cards moved is showing incorretly in a card moved more than once. I might need to work on creating a new object entirely for each time a card is dropped, or potentially completely alter the object and only drop value, origin and destination as a skeleton, if creating new objects does not work. 