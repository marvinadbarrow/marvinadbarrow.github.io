




let cardSuitsArray = []; // available suits
let cardNumbersArray = []; // available card values
let randomSuitNum = "";// variable for generated suit index
let randomSuit = "";// variable for suit name
let randomCardNum = "";// variable for generated number
let chosenCard = "" // variable for generated number and suit combined - actual card
let tableArray = []; // cards dealt to table
let displayEl = document.getElementById('display');// cards display

// function for card generation
function pickCard(){

cardSuitsArray = ["c","d","h","s"] // all suits 
cardNumbersArray = [1,2,3,4,5,6,7,8,9,10,11,12,13] // all card values
randomSuitNum = Math.floor(Math.random()*cardSuitsArray.length)//suit generated by index
randomCardNum = Math.ceil(Math.random()*cardNumbersArray.length) // card value generated
randomSuit = cardSuitsArray[randomSuitNum]// suit name picked from generated index
chosenCard = randomCardNum + randomSuit // variable for value and suit of card


// condition to prevent duplicate card generation, if duplicate generated, re-run pickCard()
if(tableArray.includes(chosenCard)){pickCard();} 
else{
console.log(tableArray.includes(chosenCard))// this check should return false (for duplicates)
tableArray.push(chosenCard) // card pushed to table
displayEl.textContent = chosenCard + ","; // card displayed
}}


/*
I think I might have found the method for preventing duplicates in the array for tableArray. 
it's the 'includes()' method. it can check if the array includes a specific element. 
We can use this to check if a randomly generated card has already been pushed to the array, and if it has, then we can re-run the the random card generator until a generated card is found to be 'not' part of the tableArray, we can then push it to the array.  This should prevent duplicates. 

example: const array1 = [1,2,3];
console.log(array1.includes(2))
// output expected; true

so, yes, this code works fine. so, since the result of the the random suit and random number is chosen card, we can push chosen card to the array, and on every click, check if the 'new' chosen card is already in the array and if it is, just re-run the generations until it isn't and then push the 'fresh' card into the array... 

the above co

*/





















